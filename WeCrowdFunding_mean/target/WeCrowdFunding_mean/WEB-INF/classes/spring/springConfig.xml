<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--spring核心配置-->


    <!--注解扫描包-->
    <context:component-scan base-package="com.leo">
        <!--controller不扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--加载配置文件-->
    <context:property-placeholder location="classpath:*.properties"/>
    <!--导入redis配置文件-->
    <import resource="springRedis.xml"/>


    <!--整合MyBatis框架-->
    <!--配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driverClass}"/>
        <property name="jdbcUrl" value="${jdbcUrl}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>
    </bean>

    <!--配置SqlSessionFactory工厂-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property value="classpath:mybatis/mybatisConfig.xml" name="configLocation"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:mybatis/*Mapper.xml</value>
            </list>
        </property>
    </bean>

    <!--mapper扫描器-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.leo.manager.dao"/>
    </bean>


    <!-- 配置事务 -->

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--开启事务注解支持-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>

        </tx:attributes>

    </tx:advice>


    <!--<aop:config>-->
        <!--<aop:advisor pointcut="execution(* com.leo.manager..*Service.*(..))" advice-ref="transactionAdvice"/>-->
    <!--</aop:config>-->


    <!--配置工作流引擎-->
    <!-- 使用工厂创建流程引擎对象 -->
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration" />
    </bean>

    <!-- 注册Service -->
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService">
    </bean>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService">
    </bean>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService">
    </bean>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService">
    </bean>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"></bean>

</beans>